from lxml import etree
import xml.etree.cElementTree as ET
from tqdm import tqdm
import cv2
import os
import argparse

def write_xml(saveDir, imagefolder, imagename, imgWidth, imgHeight, depth, bounding_boxes, pose="Unspecified"):
    annotation = ET.Element("annotation")
    ET.SubElement(annotation, 'folder').text = "val_ann_1"
    ET.SubElement(annotation, 'filename').text = str(imagename)
    ET.SubElement(annotation, 'path').text = "/home/vids/darkflow/darkflow-master/validation/val_img_1/"+ str(imagename)
    size = ET.SubElement(annotation, 'size')
    ET.SubElement(size, 'width').text = str(imgWidth)
    ET.SubElement(size, 'height').text = str(imgHeight)
    ET.SubElement(size, 'depth').text = str(depth)

    ET.SubElement(annotation, 'segmented').text = '0'

    for box in bounding_boxes:
        obj = ET.SubElement(annotation, 'object')

        ET.SubElement(obj, 'name').text = str(label_name)
        ET.SubElement(obj, 'pose').text = str(pose)
        ET.SubElement(obj, 'truncated').text = '0'
        ET.SubElement(obj, 'difficult').text = '0'

        bbox = ET.SubElement(obj, 'bndbox')

        ET.SubElement(bbox, 'xmin').text = str(bboxx1)
        ET.SubElement(bbox, 'ymin').text = str(bboxy1)
        ET.SubElement(bbox, 'xmax').text = str(bboxx2)
        ET.SubElement(bbox, 'ymax').text = str(bboxy2)

    xml_str = ET.tostring(annotation)
    root = etree.fromstring(xml_str)
    xml_str = etree.tostring(root, pretty_print=True)

    save_path = os.path.join(saveDir, os.path.splitext(imagename)[0] + ".xml")

    with open(save_path, 'wb') as temp_xml:
        temp_xml.write(xml_str)

def yolo_to_x_y(x_center, y_center, x_width, y_height, width, height):
    x_center *= width
    y_center *= height
    x_width *= width
    y_height *= height
    x_width /= 2.0
    y_height /= 2.0
    return int(x_center - x_width), int(y_center - y_height), int(x_center + x_width), int(y_center + y_height)

parser = argparse.ArgumentParser(description="Generate XML Files from .txt file")

parser.add_argument('--format', default='yolo', type=str, choices=['yolo', 'voc'], help="Bounding box format | Deafult: yolo")
parser.add_argument('--bbox_txt', default='/home/vids/darkflow/darkflow-master/train/txt/', type=str, help='Path to bbox_txt dir generated by OpenLabeling | Default: bbox_txt/')
parser.add_argument('--img_dir', default='/home/vids/darkflow/darkflow-master/train/train_img/', type=str, help='Path to Images folder | Default: images/')
parser.add_argument('--class_list', default='/home/vids/darkflow/darkflow-master/labels.txt', type=str, help='Path to class_list.txt file | Default: class_list.txt')
parser.add_argument('--save_dir', default='/home/vids/darkflow/darkflow-master/train/train_ann/', type=str, help='Where to save XML Files | Default: annotations_xml/')

args = parser.parse_args()

bbox_txt = args.bbox_txt
imagefolder = args.img_dir
saveDir = args.save_dir
format = args.format

with open(args.class_list, 'r') as f:
    labels = f.readlines()

for i in range(len(labels)):
    labels[i] = labels[i].replace('\n', '')

with tqdm(total=len(os.listdir(imagefolder))) as pbar:
    for imagename in os.listdir(imagefolder):
        img = cv2.imread(os.path.join(imagefolder, imagename))

        imgHeight, imgWidth, depth = img.shape

        with open(os.path.join(bbox_txt, os.path.splitext(imagename)[0] + '.txt')) as f:
            content = f.readlines()

        bounding_boxes = []

        for line in content:
            values_str = line.split()
            if format == 'yolo':
                class_index, x_center, y_center, x_width, y_height = map(float, values_str)
                class_index = int(class_index)
                bboxx1, bboxy1, bboxx2, bboxy2 = yolo_to_x_y(x_center, y_center, x_width, y_height, imgWidth, imgHeight)
                if x_center == int(x_center):
                    error = ("You selected the 'yolo' format but your labels "
                             "seem to be in a different format. Consider "
                             "removing your old label files.")
                    raise Exception(textwrap.fill(error, 70))
            else:
                try:
                    x1, y1, x2, y2, class_index = map(int, values_str)
                except ValueError:
                    error = ("You selected the 'voc' format but your labels "
                             "seem to be in a different format. Consider "
                             "removing your old label files.")
                    raise Exception(textwrap.fill(error, 70))
                bboxx1, bboxy1, bboxx2, bboxy2 = x1-1, y1-1, x2-1, y2-1

            label_name = labels[class_index]

            bounding_boxes.append([label_name, bboxx1, bboxy1, bboxx2, bboxy2])

        write_xml(saveDir, imagefolder, imagename, imgWidth, imgHeight, depth, bounding_boxes, pose="Unspecified")

        pbar.update(1)